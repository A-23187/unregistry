#!/usr/bin/env bash
set -euo pipefail

# Return metadata expected by the Docker CLI plugin framework: https://github.com/docker/cli/pull/1564
# TODO: update ShortDescription and Version as needed.
if [ "${1:-}" = "docker-cli-plugin-metadata" ]; then
    cat <<EOF
{
  "SchemaVersion": "0.1.0",
  "Vendor": "https://github.com/psviderski",
  "Version": "0.1.0",
  "ShortDescription": "Push Docker images to remote daemons via SSH using unregistry"
}
EOF
    exit 0
fi

# Colors for output.
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # no color

info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

usage() {
    echo "Usage: docker pussh [OPTIONS] IMAGE[:TAG] [USER@]HOST[:PORT]"
    echo ""
    echo "Upload a Docker image to a remote Docker daemon via SSH."
    echo ""
    echo "Options:"
    echo "  -h, --help              Show this help message."
    echo "  -i, --ssh-key path      Path to SSH private key for remote login (if not already added to SSH agent)."
    echo "      --platform string   Push a specific platform for a multi-platform image (e.g., linux/amd64, linux/arm64)."
    echo "                          Local Docker has to use containerd image store to support multi-platform images."
    echo ""
    echo "Examples:"
    echo "  docker pussh myimage:latest user@host"
    echo "  docker pussh --platform linux/amd64 myimage:latest host"
    echo "  docker pussh myimage:latest user@host:2222 -i ~/.ssh/id_ed25519"
}

DOCKER_PLATFORM=""
SSH_KEY=""
IMAGE=""
SSH_ADDRESS=""

# Skip 'pussh' if called as Docker CLI plugin.
if [ "${1:-}" = "pussh" ]; then
    shift
fi

# Parse options and arguments.
help_command="Run 'docker pussh --help' for usage information."
while [ $# -gt 0 ]; do
    case "$1" in
        -i|--ssh-key)
            if [ -z "${2:-}" ]; then
                error "-i/--ssh-key option requires an argument.\n${help_command}"
            fi
            SSH_KEY="$2"
            shift 2
            ;;
        --platform)
            if [ -z "${2:-}" ]; then
                error "--platform option requires an argument.\n${help_command}"
            fi
            DOCKER_PLATFORM="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            error "unknown option: $1\n${help_command}"
            ;;
        *)
            # First non-option argument is the image.
            if [ -z "$IMAGE" ]; then
                IMAGE="$1"
            # Second non-option argument is the SSH address.
            elif [ -z "$SSH_ADDRESS" ]; then
                SSH_ADDRESS="$1"
            else
                error "too many arguments.\n${help_command}"
            fi
            shift
            ;;
    esac
done

# Validate required arguments.
if [ -z "$IMAGE" ] || [ -z "$SSH_ADDRESS" ]; then
    error "IMAGE and HOST are required.\n${help_command}"
fi
# Validate SSH key file exists if provided.
if [ -n "$SSH_KEY" ] && [ ! -f "$SSH_KEY" ]; then
    error "SSH key file not found: $SSH_KEY"
fi
